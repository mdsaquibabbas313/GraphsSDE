class Solution {
public:
    // check closed island
    bool dfs(int r , int c , vector<vector<int>>& grid) {
        // out of bound no closed
        
        if(r < 0 || r >= grid.size() || c < 0 || c >= grid[0].size()) return false;
        
        if(grid[r][c] == 1) return true;
        
        grid[r][c] = 1; // mark visited
        
        bool left_check = dfs(r , c-1 ,  grid);
        bool right_check = dfs(r , c+1 ,  grid);
        bool up_check = dfs(r-1 , c ,  grid);
        bool down_check = dfs(r+1 , c , grid);
        
        return (left_check && right_check && up_check && down_check);
    }
    int closedIsland(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        // vector<vector<int>> vis(n , vector<int>(m , 0));
        
        int cnt = 0 ;
        
        for(int i = 0 ; i<n ; i++) {
            for(int j = 0 ; j <m ; j++) {
                if(grid[i][j] == 0){
                    if(dfs(i , j , grid)) cnt++;
                }
            }
        }
        
        return cnt;
    }
};
